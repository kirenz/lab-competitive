---
title: Altair
lang: en
subtitle: Basics, Task Overview and Hints
author: Jan Kirenz
execute:
  eval: true
  echo: true
highlight-style: github
format:
  revealjs: 
    toc: true
    toc-depth: 1
    embed-resources: false
    theme: [dark, ../custom.scss]  
    incremental: true
    transition: slide
    background-transition: fade
    transition-speed: slow
    code-copy: true
    code-line-numbers: true
    smaller: false
    scrollable: true
    slide-number: c
    preview-links: auto
    chalkboard: 
      buttons: false
   #logo: images/logo.png
    footer: Jan Kirenz
---

# Introduction to Altair-Vega

- Altair is a declarative statistical visualization library in Python.

- It's built on [Vega](https://vega.github.io/vega/) and [Vega-Lite](https://vega.github.io/vega-lite-api/), which are visualization grammars built on top of [D3](https://d3js.org/). 


## Key features of Altair

- Simple API: Just a few lines of code can create beautiful visualizations.

- Integration with Pandas: Altair's API is designed to work with Pandas dataframes.

- Declarative Visualization: You describe the properties of a visualization and let Altair figure out how to implement it.

# Altair example

## Python Setup


```{python}
import altair as alt
import pandas as pd
```

## Create a DataFrame


```{python}
data = {'name': ['Zeynep', 'Anna', 'Tim', 'Sara', 'Elias', 'Admir', 'Lina'],  # <2>
        'age': [33, 25, 23, 21, 28, 20, 31],
        'date': ['1990-06-03', '1998-03-12', '2000-01-20', '2002-02-16', '1995-05-02', '2003-06-03', '1992-06-03'],
        'city': ['Stuttgart', 'Berlin', 'Stuttgart', 'Stuttgart', 'Berlin', 'Munich', 'Stuttgart']}

df = pd.DataFrame(data)

```

## Change Data Format


```{python}
CAT_LIST = ['name', 'city']

for i in CAT_LIST:
    df[i] = df[i].astype('category')

df['date'] = pd.to_datetime(df['date'])

```


## Bar Chart


- We use `.mark_bar()` to create a bar plot

. . .

```{python}
# | output-location: column-fragment

alt.Chart(df).mark_bar().encode(  # <1>
    x=alt.X('name'),              # <2>
    y=alt.Y('age')                # <3>
)


```

1. Define a chart object (ACME acronym)
2. Define x-axis
3. Define y-axis


## Bar Chart with sorted values

```{python}
# | output-location: column-fragment

alt.Chart(df).mark_bar().encode(
    x=alt.X('name').sort('y'),   # <1>
    y=alt.Y('age')
)

```

1. Sort the values in an ascending order 

## Bar Chart with sorted values

```{python}
# | output-location: column-fragment

alt.Chart(df).mark_bar().encode(
    x=alt.X('name').sort('-y'),   # <1>
    y=alt.Y('age')
)

```

1. Sort the values in a descending order 

## Bar Chart with properties

```{python}
# | output-location: column-fragment

alt.Chart(df).mark_bar().encode(
    x=alt.X('name').sort('-y'),
    y=alt.Y('age')
).properties(                            # <1>
    title='This is a simple bar chart',  # <2>
    width=300,                           # <3>
    height=150                           # <4>
)

```

1. Add properties to the chart
2. Define a chart title
3. Set the width of the chart (in pixel)
4. Set the height of the chart (in pixel)



## Bar Chart with properties

```{python}
# | output-location: column-fragment

alt.Chart(df).mark_bar().encode(
    x=alt.X('name').sort('-y'),
    y=alt.Y('age')
).properties(                            # <1>
    title='This is a simple bar chart',  # <2>
    width=300,                           # <3>
    height=150                           # <4>
)

```

1. Add properties to the chart
2. Define a chart title
3. Set the width of the chart (in pixel)
4. Set the height of the chart (in pixel)

## Bar chart with custom x-axis


```{python}
# | output-location: column-fragment

alt.Chart(df).mark_bar().encode(
    x=alt.X('name').sort('-y').axis(
        title="Name",  # <1>
        labelAngle=0,         # <2>
        grid=False,           # <3>
        titleAnchor="start"),  # <4>
    y=alt.Y('age')
).properties(
    title='This is a simple bar chart',
    width=300,
    height=150
)


```

1. Title of x-axis
2. Angle of axis text
3. Hide the lines in the background
4. Adjustment of the text at the x-axis


## Bar chart with custom y-axis


```{python}
# | output-location: column-fragment

alt.Chart(df).mark_bar().encode(
    x=alt.X('name').sort('-y'),
    y=alt.Y('age').axis(
        title="Age",  # <1>
        grid=False,  # <2>
        titleAnchor="end"),  # <3>
).properties(
    title='This is a simple bar chart',
    width=300,
    height=150
)


```

1. Title of y-axis
2. Hide the grid
3. Adjustment of the text at the y axis


## Bar chart with custom title


```{python}
# | output-location: column-fragment

alt.Chart(df).mark_bar().encode(
    x=alt.X('name').sort('-y'),
    y=alt.Y('age')
).properties(
    title='This is a simple bar chart',
    width=300,
    height=150
).configure_title(  # <1>
    fontSize=16,
    font='Arial',
    color='black',
    anchor='start'  # <2>
)


```

1. Custom title options
2. Where to anchor the title (`start`, `middle` or `end`)

## Final bar plot


```{python}
# | output-location: slide

alt.Chart(df).mark_bar().encode(
    x=alt.X('name').sort('-y').axis(
        title="Name",
        labelAngle=0,
        grid=False,
        titleAnchor="start"),
    y=alt.Y('age').axis(
        title="Age",
        grid=False,
        titleAnchor="end"),
).properties(
    title='This is a simple bar chart',
    width=300,
    height=150
).configure_title(
    fontSize=16,
    font='Arial',
    color='black',
    anchor='start'
).configure_view(  # <1>
    strokeWidth=0
)


```

1. Remove the lines at the top and the right of the plot


# Task Overview and Hints

## Task 1: Average Revenue by E-Shop

You're required to show the average revenue for all shops, using the name `average_revenue`.

**Hint:**

1. Import the Altair library.
2. Read the CSV data into a Pandas DataFrame.
3. Use `alt.Chart()` to create a chart.
4. Use `mark_bar()` to specify that you want a bar chart.
5. Use `encode()` to specify the X and Y axes. You can compute the average revenue using Altair's built-in `average()` function.


## Task 2: Two E-Shops with the Highest Average Rating

The task is to show the two E-Shops with the highest average rating, using the name \`average_rating\`.

**Hint:**

1. Group the data by 'eshop_name' and calculate the mean of 'average_rating' for each group.
2. Sort the results in descending order and pick the top 2.
3. Use the same charting methods as in Task 1 to visualize the data.


## Task 3: E-Shop Performance Over Time

You're tasked with showing the annual revenue per E-Shop by year, using the names \`year\` and \`total_revenue\`.

**Hint:**

1. Make sure the 'date' column is in a date-time format.
2. Extract the year from the 'date' column using the \`year()\` function in Altair.
3. To get the total revenue, use the \`sum()\` function in Altair.
4. Use \`mark_bar()\` for the chart type and encode the axes accordingly.


## Task 4: Maximum Social Media Followers

Your task is to show the maximum amount of social media followers for every E-shop in a descending order, using the name \`max_followers\`.

**Hint:**

1. Use the \`max()\` function in Altair to calculate the maximum number of social media followers for each E-shop.
2. Sort the E-shops by the 'y' axis in descending order when encoding the 'x' axis.


## Task 5: Monthly Time on Site overview

The final task is to show a monthly overview of the average time on site for every E-shop (ordered by E-shop and month), using the names \`month\` and \`average_time_on_site\`.

**Hint:**

1. Extract the month from the 'date' column using the \`month()\` function in Altair.
2. To get the average time on site, use the \`average()\` function in Altair.
3. Use \`mark_line()\` for the chart type and encode the axes accordingly.


